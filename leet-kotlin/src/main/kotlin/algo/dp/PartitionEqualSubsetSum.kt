package algo.dp

private fun canPartition(nums: IntArray): Boolean {
    val sum = nums.sum()
    if (sum % 2 != 0) return false

    val numCounts = IntArray(101) { 0 }
    for (num in nums) numCounts[num]++

    return elementsSumTo(sum / 2, numCounts)
}

private fun elementsSumTo(target: Int, numCounts: IntArray): Boolean {
    for (num in 1..numCounts.lastIndex) {
        val count = numCounts[num]
        if (count == 0) continue

        if (target - num < 0) break
        if (target - num == 0) {
            return true
        }

        numCounts[num]--
        if (elementsSumTo(target - num, numCounts)) {
            numCounts[num]++
            return true
        }

        numCounts[num]++
    }

    return false
}

fun main() {
    println(canPartition(intArrayOf(1, 5, 11, 5)))
    println(canPartition(intArrayOf(1, 2, 3, 5)))
    println(canPartition(intArrayOf(14, 17, 13, 18, 1, 12, 5, 8, 4)))
    println(
        canPartition(
            intArrayOf(
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                4,
                8,
                8,
                8,
                8,
                8,
                8,
                8,
                8,
                12,
                12,
                12,
                12,
                12,
                12,
                12,
                12,
                16,
                16,
                16,
                16,
                16,
                16,
                16,
                16,
                20,
                20,
                20,
                20,
                20,
                20,
                20,
                20,
                24,
                24,
                24,
                24,
                24,
                24,
                24,
                24,
                28,
                28,
                28,
                28,
                28,
                28,
                28,
                28,
                32,
                32,
                32,
                32,
                32,
                32,
                32,
                32,
                36,
                36,
                36,
                36,
                36,
                36,
                36,
                36,
                40,
                40,
                40,
                40,
                40,
                40,
                40,
                40,
                44,
                44,
                44,
                44,
                44,
                44,
                44,
                44,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                48,
                52,
                52,
                52,
                52,
                52,
                52,
                52,
                52,
                56,
                56,
                56,
                56,
                56,
                56,
                56,
                56,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                60,
                64,
                64,
                64,
                64,
                64,
                64,
                64,
                64,
                68,
                68,
                68,
                68,
                68,
                68,
                68,
                68,
                72,
                72,
                72,
                72,
                72,
                72,
                72,
                72,
                76,
                76,
                76,
                76,
                76,
                76,
                76,
                76,
                80,
                80,
                80,
                80,
                80,
                80,
                80,
                80,
                84,
                84,
                84,
                84,
                84,
                84,
                84,
                84,
                88,
                88,
                88,
                88,
                88,
                88,
                88,
                88,
                92,
                92,
                92,
                92,
                92,
                92,
                92,
                92,
                96,
                96,
                96,
                96,
                96,
                96,
                96,
                96,
                97,
                99
            )
        )
    )
}
